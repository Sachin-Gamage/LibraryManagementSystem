Container.tsx
=============

/* tslint:disable */
import * as React from 'react';
import { BrowserRouter as Router, Route, Link } from "react-router-dom";
import { AddItem } from './components/addItem';

export class Container extends React.Component<{},{}>{

    public render(){
        return (
        <Router>
            <div>
            <div className="header">
              <h1>Library Management System</h1>
            </div>
            <div className="navbar">
                    <Link to="/addItem">Add New Item</Link>
                    <Link to="/deleteItem">Delete Items</Link>
                    <Link to="/viewItems">View Items</Link>
                    <Link to="/BurrowItems">Burrow Item</Link>
                    <Link to="/ReturnItem">Return Item</Link>
                    <Link to="Reports">Reports</Link>
                    <Route exact path="/addItem" component={AddItem} />
                    <Route path="/deleteItem" component={AddItem} />
                    <Route path="/viewItems" component={AddItem} />
                    <Route path="/BurrowItems" component={AddItem} />
                    <Route path="/ReturnItem" component={AddItem} />
                    <Route path="/Reports" component={AddItem} />
            </div>
          </div>
        </Router>
        );
    }
}


MODALS
======

Book
----

import { LibraryItem } from './libraryItem';

export class Book extends LibraryItem{
    private authors: string[];
    private publisher:string;
    private noOfPages:number;


    /**
     * Getter $authors
     * @return {string[]}
     */
	public get $authors(): string[] {
		return this.authors;
	}

    /**
     * Setter $authors
     * @param {string[]} value
     */
	public set $authors(value: string[]) {
		this.authors = value;
	}

    /**
     * Getter $publisher
     * @return {string}
     */
	public get $publisher(): string {
		return this.publisher;
	}

    /**
     * Setter $publisher
     * @param {string} value
     */
	public set $publisher(value: string) {
		this.publisher = value;
	}

    /**
     * Getter $noOfPages
     * @return {number}
     */
	public get $noOfPages(): number {
		return this.noOfPages;
	}

    /**
     * Setter $noOfPages
     * @param {number} value
     */
	public set $noOfPages(value: number) {
		this.noOfPages = value;
	}
}

dvd
---

import { LibraryItem } from './libraryItem';

export class DVD extends LibraryItem{
    private languagesAvailable: string[];
    private subsAvailablae: string[];
    private producer: string;
    private actors: string[];



    /**
     * Getter $languagesAvailable
     * @return {string[]}
     */
	public get $languagesAvailable(): string[] {
		return this.languagesAvailable;
	}

    /**
     * Setter $languagesAvailable
     * @param {string[]} value
     */
	public set $languagesAvailable(value: string[]) {
		this.languagesAvailable = value;
	}

    /**
     * Getter $subsAvailablae
     * @return {string[]}
     */
	public get $subsAvailablae(): string[] {
		return this.subsAvailablae;
	}

    /**
     * Setter $subsAvailablae
     * @param {string[]} value
     */
	public set $subsAvailablae(value: string[]) {
		this.subsAvailablae = value;
	}

    /**
     * Getter $producer
     * @return {string}
     */
	public get $producer(): string {
		return this.producer;
	}

    /**
     * Setter $producer
     * @param {string} value
     */
	public set $producer(value: string) {
		this.producer = value;
	}

    /**
     * Getter $actors
     * @return {string[]}
     */
	public get $actors(): string[] {
		return this.actors;
	}

    /**
     * Setter $actors
     * @param {string[]} value
     */
	public set $actors(value: string[]) {
		this.actors = value;
	}
   
}

libraryItem
-----------

import { Reader } from './reader';

export abstract class LibraryItem {
    private ISBN:string;
    private title:string;
    private sector:string;
    private pubDate:Date;
    private burrowDateAndTime:Date;
    private reader:Reader;


    /**
     * Getter $ISBN
     * @return {string}
     */
	public get $ISBN(): string {
		return this.ISBN;
	}

    /**
     * Setter $ISBN
     * @param {string} value
     */
	public set $ISBN(value: string) {
		this.ISBN = value;
	}

    /**
     * Getter $title
     * @return {string}
     */
	public get $title(): string {
		return this.title;
	}

    /**
     * Setter $title
     * @param {string} value
     */
	public set $title(value: string) {
		this.title = value;
	}

    /**
     * Getter $sector
     * @return {string}
     */
	public get $sector(): string {
		return this.sector;
	}

    /**
     * Setter $sector
     * @param {string} value
     */
	public set $sector(value: string) {
		this.sector = value;
	}

    /**
     * Getter $pubDate
     * @return {Date}
     */
	public get $pubDate(): Date {
		return this.pubDate;
	}

    /**
     * Setter $pubDate
     * @param {Date} value
     */
	public set $pubDate(value: Date) {
		this.pubDate = value;
	}

    /**
     * Getter $burrowDateAndTime
     * @return {Date}
     */
	public get $burrowDateAndTime(): Date {
		return this.burrowDateAndTime;
	}

    /**
     * Setter $burrowDateAndTime
     * @param {Date} value
     */
	public set $burrowDateAndTime(value: Date) {
		this.burrowDateAndTime = value;
	}

    /**
     * Getter $reader
     * @return {Reader}
     */
	public get $reader(): Reader {
		return this.reader;
	}

    /**
     * Setter $reader
     * @param {Reader} value
     */
	public set $reader(value: Reader) {
		this.reader = value;
	}
}

Reader
------



export class Reader{

    private id: number;
    private name: string;
    private mobileNumber: string;
    private email: string;

    /**
     * Getter $id
     * @return {number}
     */
	public get $id(): number {
		return this.id;
	}

    /**
     * Setter $id
     * @param {number} value
     */
	public set $id(value: number) {
		this.id = value;
	}

    /**
     * Getter $name
     * @return {string}
     */
	public get $name(): string {
		return this.name;
	}

    /**
     * Setter $name
     * @param {string} value
     */
	public set $name(value: string) {
		this.name = value;
	}

    /**
     * Getter $mobileNumber
     * @return {string}
     */
	public get $mobileNumber(): string {
		return this.mobileNumber;
	}

    /**
     * Setter $mobileNumber
     * @param {string} value
     */
	public set $mobileNumber(value: string) {
		this.mobileNumber = value;
	}

    /**
     * Getter $email
     * @return {string}
     */
	public get $email(): string {
		return this.email;
	}

    /**
     * Setter $email
     * @param {string} value
     */
	public set $email(value: string) {
		this.email = value;
	}
   
}

Report
------

export class Report{
    private ISBN:string;
    private itemType:string;
    private title:string;
    private fine:number;


    /**
     * Getter $ISBN
     * @return {string}
     */
	public get $ISBN(): string {
		return this.ISBN;
	}

    /**
     * Setter $ISBN
     * @param {string} value
     */
	public set $ISBN(value: string) {
		this.ISBN = value;
	}

    /**
     * Getter $itemType
     * @return {string}
     */
	public get $itemType(): string {
		return this.itemType;
	}

    /**
     * Setter $itemType
     * @param {string} value
     */
	public set $itemType(value: string) {
		this.itemType = value;
	}

    /**
     * Getter $title
     * @return {string}
     */
	public get $title(): string {
		return this.title;
	}

    /**
     * Setter $title
     * @param {string} value
     */
	public set $title(value: string) {
		this.title = value;
	}

    /**
     * Getter $fine
     * @return {number}
     */
	public get $fine(): number {
		return this.fine;
	}

    /**
     * Setter $fine
     * @param {number} value
     */
	public set $fine(value: number) {
		this.fine = value;
	}

}


Services
========

LibraryManagementService
------------------------

/* tslint:disable */

import { DVD } from "../modals/dvd";
import { Book } from "../modals/book";
import { LibraryItemDisplay } from "../modals/libraryItemDisplay";
import { Reader } from "../modals/reader";
import { Report } from "../modals/report";

export class LibraryManagementService {
  private dvdList: DVD[];
  private bookList: Book[];

  constructor() {
    this.dvdList = new Array<DVD>();
    this.bookList = new Array<Book>();
  }

  public addItem(itemType: string, dvd: DVD, book: Book) {
    if (itemType.toLowerCase() === "dvd") {
      return this.addDVD(dvd);
    } else {
      return this.addBook(book);
    }
  }

  public deleteItem(itemType: string, ISBN: string): any {
    if (itemType.toLowerCase() === "dvd") {
      this.dvdList.forEach(dvd => {
        if (dvd.$ISBN === ISBN) {
          this.dvdList.splice(this.dvdList.indexOf(dvd), 1);
          return { freeSpace: this.dvdList.length, deleteditem: "DVD" };
        }
      });
    } else {
      this.bookList.forEach(book => {
        if (book.$ISBN === ISBN) {
          this.bookList.splice(this.bookList.indexOf(book), 1);
          return { freeSpace: this.bookList.length, deleteditem: "Book" };
        }
      });
    }
    return { freeSpace: null, deletedItem: null };
  }

  public displayItems(): LibraryItemDisplay[] {
    let libraryItemList: LibraryItemDisplay[] = new Array<LibraryItemDisplay>();

    this.bookList.forEach(book => {
      let bookItem: LibraryItemDisplay = new LibraryItemDisplay();

      bookItem.$ISBN = book.$ISBN;
      bookItem.$itemtype = "Book";
      bookItem.$title = book.$title;
      libraryItemList.push(bookItem);
    });

    this.dvdList.forEach(dvd => {
      let dvdItem: LibraryItemDisplay = new LibraryItemDisplay();

      dvdItem.$ISBN = dvd.$ISBN;
      dvdItem.$itemtype = "Dvd";
      dvdItem.$title = dvd.$title;
      libraryItemList.push(dvdItem);
    });

    return libraryItemList;
  }

  public burrowItem(ISBN: string, itemType: string, reader: Reader): string {
    if (itemType.toLowerCase() === "dvd") {
      this.dvdList.forEach(dvd => {
        if (dvd.$ISBN === ISBN) {
          if (dvd.$reader !== null) {
            dvd.$reader = reader;
            return "Burrow Item Successfull";
          } else {
            return (
              "You cannot burrow this item now. The item will be available by " +
              dvd.$burrowDateAndTime.getDate() +
              3
            );
          }
        }
      });
    } else {
      this.bookList.forEach(book => {
        if (book.$ISBN === ISBN) {
          if (book.$reader !== null) {
            book.$reader = reader;
            return "Burrow Item Successfull";
          } else {
            return (
              "You cannot burrow this item now. The item will be available by " +
              book.$burrowDateAndTime.getDate() +
              7
            );
          }
        }
      });
    }
    return "No item found";
  }

  public returnItem(itemType: string, ISBN: string) {
    if (itemType.toLowerCase() === "dvd") {
      this.dvdList.forEach(dvd => {
        if (dvd.$ISBN === ISBN) {
          dvd.$reader = new Reader();
          if (new Date().getDate() > dvd.$burrowDateAndTime.getDate() + 3) {
            return {
              message: "Item Returned",
              fine: this.calculateFine(
                new Date().getDate() - dvd.$burrowDateAndTime.getDate() + 3
              )
            };
          } else {
            return { message: "Item Returned", fine: null };
          }
        }
      });
    } else {
      this.bookList.forEach(book => {
        if (book.$ISBN === ISBN) {
          book.$reader = new Reader();
          if (new Date().getDate() > book.$burrowDateAndTime.getDate() + 7) {
            return {
              message: "Item Returned",
              fine: this.calculateFine(
                new Date().getDate() - book.$burrowDateAndTime.getDate() + 7
              )
            };
          } else {
            return { message: "Item Returned", fine: null };
          }
        }
      });
    }
    return "No item found";
  }

  public generateReport(): Report[] {
    let reportList: Report[] = new Array<Report>();
    this.dvdList.forEach(dvd => {
      if (new Date().getDate() > dvd.$burrowDateAndTime.getDate() + 3) {
        let overDueDVD: Report = new Report();
        overDueDVD.$ISBN = dvd.$ISBN;
        overDueDVD.$itemType = "DVD";
        overDueDVD.$title = dvd.$title;
        overDueDVD.$fine = this.calculateFine(
          new Date().getDate() - dvd.$burrowDateAndTime.getDate() + 3
        );
        reportList.push(overDueDVD);
      }
    });

    this.bookList.forEach(book => {
      if (new Date().getDate() > book.$burrowDateAndTime.getDate() + 7) {
        let overDuebook: Report = new Report();
        overDuebook.$ISBN = book.$ISBN;
        overDuebook.$itemType = "Book";
        overDuebook.$title = book.$title;
        overDuebook.$fine = this.calculateFine(
          new Date().getDate() - book.$burrowDateAndTime.getDate() + 7
        );
        reportList.push(overDuebook);
      }
    });

    return reportList;
  }

  private addDVD(dvd: DVD): string {
    if (this.dvdList.length <= 50) {
      this.dvdList.push(dvd);
      return "Success Fully Added";
    } else {
      return "Fail to add";
    }
  }

  private addBook(book: Book): string {
    if (this.bookList.length <= 100) {
      this.bookList.push(book);
      return "Successfully Added";
    } else {
      return "Fail to add";
    }
  }

  private calculateFine(penaltyDays: number): number {
    if (penaltyDays <= 3) {
      return penaltyDays * 24 * 0.2;
    } else {
      const extraDays = penaltyDays - 3;
      const firstThreeDayFine = 14.4;

      return firstThreeDayFine + extraDays * 24 * 0.5;
    }
  }
}
